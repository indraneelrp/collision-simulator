<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="790" onload="init(evt)" viewBox="0 0 1200 790" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="790" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="773.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="773.00"> </text><svg id="frames" x="10" width="1180" total_samples="2801177286"><g><title>std::__ostream_insert&lt;char, std::char_traits&lt;char&gt; &gt; (3,711,467 samples, 0.13%)</title><rect x="0.0009%" y="693" width="0.1325%" height="15" fill="rgb(227,0,7)" fg:x="25380" fg:w="3711467"/><text x="0.2509%" y="703.50"></text></g><g><title>std::ostream::_M_insert&lt;double&gt; (3,637,483 samples, 0.13%)</title><rect x="0.1334%" y="693" width="0.1299%" height="15" fill="rgb(217,0,24)" fg:x="3736847" fg:w="3637483"/><text x="0.3834%" y="703.50"></text></g><g><title>[[heap]] (10,870,257 samples, 0.39%)</title><rect x="0.0009%" y="709" width="0.3881%" height="15" fill="rgb(221,193,54)" fg:x="25380" fg:w="10870257"/><text x="0.2509%" y="719.50"></text></g><g><title>unlink_chunk (3,521,307 samples, 0.13%)</title><rect x="0.2633%" y="693" width="0.1257%" height="15" fill="rgb(248,212,6)" fg:x="7374330" fg:w="3521307"/><text x="0.5133%" y="703.50"></text></g><g><title>__GI___libc_malloc (3,788,232 samples, 0.14%)</title><rect x="0.3890%" y="693" width="0.1352%" height="15" fill="rgb(208,68,35)" fg:x="10895637" fg:w="3788232"/><text x="0.6390%" y="703.50"></text></g><g><title>[unknown] (7,515,169 samples, 0.27%)</title><rect x="0.3890%" y="709" width="0.2683%" height="15" fill="rgb(232,128,0)" fg:x="10895637" fg:w="7515169"/><text x="0.6390%" y="719.50"></text></g><g><title>std::__detail::_Map_base&lt;int, std::pair&lt;int const, std::vector&lt;Particle*, std::allocator&lt;Particle*&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;int const, std::vector&lt;Particle*, std::allocator&lt;Particle*&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt;, true&gt;::operator[] (3,726,937 samples, 0.13%)</title><rect x="0.5242%" y="693" width="0.1330%" height="15" fill="rgb(207,160,47)" fg:x="14683869" fg:w="3726937"/><text x="0.7742%" y="703.50"></text></g><g><title>[libgomp.so.1.0.0] (1,593,305,046 samples, 56.88%)</title><rect x="0.6573%" y="661" width="56.8798%" height="15" fill="rgb(228,23,34)" fg:x="18410806" fg:w="1593305046"/><text x="0.9073%" y="671.50">[libgomp.so.1.0.0]</text></g><g><title>main._omp_fn.0 (3,963,361 samples, 0.14%)</title><rect x="57.5371%" y="661" width="0.1415%" height="15" fill="rgb(218,30,26)" fg:x="1611715852" fg:w="3963361"/><text x="57.7871%" y="671.50"></text></g><g><title>GOMP_critical_end (30,751,236 samples, 1.10%)</title><rect x="57.8204%" y="645" width="1.0978%" height="15" fill="rgb(220,122,19)" fg:x="1619651855" fg:w="30751236"/><text x="58.0704%" y="655.50"></text></g><g><title>GOMP_critical_start (19,912,736 samples, 0.71%)</title><rect x="58.9182%" y="645" width="0.7109%" height="15" fill="rgb(250,228,42)" fg:x="1650403091" fg:w="19912736"/><text x="59.1682%" y="655.50"></text></g><g><title>[libgomp.so.1.0.0] (550,805,158 samples, 19.66%)</title><rect x="59.6291%" y="645" width="19.6633%" height="15" fill="rgb(240,193,28)" fg:x="1670315827" fg:w="550805158"/><text x="59.8791%" y="655.50">[libgomp.so.1.0.0]</text></g><g><title>operator new (20,298,152 samples, 0.72%)</title><rect x="79.2924%" y="645" width="0.7246%" height="15" fill="rgb(216,20,37)" fg:x="2221120985" fg:w="20298152"/><text x="79.5424%" y="655.50"></text></g><g><title>__GI___libc_malloc (20,298,152 samples, 0.72%)</title><rect x="79.2924%" y="629" width="0.7246%" height="15" fill="rgb(206,188,39)" fg:x="2221120985" fg:w="20298152"/><text x="79.5424%" y="639.50"></text></g><g><title>_int_malloc (16,343,122 samples, 0.58%)</title><rect x="79.4336%" y="613" width="0.5834%" height="15" fill="rgb(217,207,13)" fg:x="2225076015" fg:w="16343122"/><text x="79.6836%" y="623.50"></text></g><g><title>main._omp_fn.1 (655,717,818 samples, 23.41%)</title><rect x="57.6786%" y="661" width="23.4087%" height="15" fill="rgb(231,73,38)" fg:x="1615679213" fg:w="655717818"/><text x="57.9286%" y="671.50">main._omp_fn.1</text></g><g><title>std::__detail::_Map_base&lt;int, std::pair&lt;int const, std::vector&lt;Particle*, std::allocator&lt;Particle*&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;int const, std::vector&lt;Particle*, std::allocator&lt;Particle*&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt;, true&gt;::operator[] (29,977,894 samples, 1.07%)</title><rect x="80.0170%" y="645" width="1.0702%" height="15" fill="rgb(225,20,46)" fg:x="2241419137" fg:w="29977894"/><text x="80.2670%" y="655.50"></text></g><g><title>operator new (18,065,949 samples, 0.64%)</title><rect x="80.4423%" y="629" width="0.6449%" height="15" fill="rgb(210,31,41)" fg:x="2253331082" fg:w="18065949"/><text x="80.6923%" y="639.50"></text></g><g><title>__GI___libc_malloc (18,065,949 samples, 0.64%)</title><rect x="80.4423%" y="613" width="0.6449%" height="15" fill="rgb(221,200,47)" fg:x="2253331082" fg:w="18065949"/><text x="80.6923%" y="623.50"></text></g><g><title>_int_malloc (18,065,949 samples, 0.64%)</title><rect x="80.4423%" y="597" width="0.6449%" height="15" fill="rgb(226,26,5)" fg:x="2253331082" fg:w="18065949"/><text x="80.6923%" y="607.50"></text></g><g><title>main._omp_fn.2 (15,282,336 samples, 0.55%)</title><rect x="81.0872%" y="661" width="0.5456%" height="15" fill="rgb(249,33,26)" fg:x="2271397031" fg:w="15282336"/><text x="81.3372%" y="671.50"></text></g><g><title>__clone3 (2,488,497,319 samples, 88.84%)</title><rect x="0.6573%" y="709" width="88.8376%" height="15" fill="rgb(235,183,28)" fg:x="18410806" fg:w="2488497319"/><text x="0.9073%" y="719.50">__clone3</text></g><g><title>start_thread (2,488,497,319 samples, 88.84%)</title><rect x="0.6573%" y="693" width="88.8376%" height="15" fill="rgb(221,5,38)" fg:x="18410806" fg:w="2488497319"/><text x="0.9073%" y="703.50">start_thread</text></g><g><title>[libgomp.so.1.0.0] (2,488,497,319 samples, 88.84%)</title><rect x="0.6573%" y="677" width="88.8376%" height="15" fill="rgb(247,18,42)" fg:x="18410806" fg:w="2488497319"/><text x="0.9073%" y="687.50">[libgomp.so.1.0.0]</text></g><g><title>main._omp_fn.3 (220,228,758 samples, 7.86%)</title><rect x="81.6328%" y="661" width="7.8620%" height="15" fill="rgb(241,131,45)" fg:x="2286679367" fg:w="220228758"/><text x="81.8828%" y="671.50">main._omp_f..</text></g><g><title>std::__detail::_Map_base&lt;int, std::pair&lt;int const, std::vector&lt;Particle*, std::allocator&lt;Particle*&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;int const, std::vector&lt;Particle*, std::allocator&lt;Particle*&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt;, true&gt;::operator[] (15,127,996 samples, 0.54%)</title><rect x="88.9547%" y="645" width="0.5401%" height="15" fill="rgb(249,31,29)" fg:x="2491780129" fg:w="15127996"/><text x="89.2047%" y="655.50"></text></g><g><title>[libgomp.so.1.0.0] (3,574,502 samples, 0.13%)</title><rect x="89.7615%" y="629" width="0.1276%" height="15" fill="rgb(225,111,53)" fg:x="2514379670" fg:w="3574502"/><text x="90.0115%" y="639.50"></text></g><g><title>[libgomp.so.1.0.0] (3,574,502 samples, 0.13%)</title><rect x="89.7615%" y="613" width="0.1276%" height="15" fill="rgb(238,160,17)" fg:x="2514379670" fg:w="3574502"/><text x="90.0115%" y="623.50"></text></g><g><title>GOMP_critical_end (6,972,262 samples, 0.25%)</title><rect x="89.8891%" y="613" width="0.2489%" height="15" fill="rgb(214,148,48)" fg:x="2517954172" fg:w="6972262"/><text x="90.1391%" y="623.50"></text></g><g><title>asm_common_interrupt (3,447,081 samples, 0.12%)</title><rect x="90.0150%" y="597" width="0.1231%" height="15" fill="rgb(232,36,49)" fg:x="2521479353" fg:w="3447081"/><text x="90.2650%" y="607.50"></text></g><g><title>common_interrupt (3,447,081 samples, 0.12%)</title><rect x="90.0150%" y="581" width="0.1231%" height="15" fill="rgb(209,103,24)" fg:x="2521479353" fg:w="3447081"/><text x="90.2650%" y="591.50"></text></g><g><title>irq_exit_rcu (3,447,081 samples, 0.12%)</title><rect x="90.0150%" y="565" width="0.1231%" height="15" fill="rgb(229,88,8)" fg:x="2521479353" fg:w="3447081"/><text x="90.2650%" y="575.50"></text></g><g><title>handle_softirqs (3,447,081 samples, 0.12%)</title><rect x="90.0150%" y="549" width="0.1231%" height="15" fill="rgb(213,181,19)" fg:x="2521479353" fg:w="3447081"/><text x="90.2650%" y="559.50"></text></g><g><title>net_rx_action (3,447,081 samples, 0.12%)</title><rect x="90.0150%" y="533" width="0.1231%" height="15" fill="rgb(254,191,54)" fg:x="2521479353" fg:w="3447081"/><text x="90.2650%" y="543.50"></text></g><g><title>__napi_poll (3,447,081 samples, 0.12%)</title><rect x="90.0150%" y="517" width="0.1231%" height="15" fill="rgb(241,83,37)" fg:x="2521479353" fg:w="3447081"/><text x="90.2650%" y="527.50"></text></g><g><title>e1000e_poll (3,447,081 samples, 0.12%)</title><rect x="90.0150%" y="501" width="0.1231%" height="15" fill="rgb(233,36,39)" fg:x="2521479353" fg:w="3447081"/><text x="90.2650%" y="511.50"></text></g><g><title>napi_complete_done (3,447,081 samples, 0.12%)</title><rect x="90.0150%" y="485" width="0.1231%" height="15" fill="rgb(226,3,54)" fg:x="2521479353" fg:w="3447081"/><text x="90.2650%" y="495.50"></text></g><g><title>netif_receive_skb_list_internal (3,447,081 samples, 0.12%)</title><rect x="90.0150%" y="469" width="0.1231%" height="15" fill="rgb(245,192,40)" fg:x="2521479353" fg:w="3447081"/><text x="90.2650%" y="479.50"></text></g><g><title>__netif_receive_skb_list_core (3,447,081 samples, 0.12%)</title><rect x="90.0150%" y="453" width="0.1231%" height="15" fill="rgb(238,167,29)" fg:x="2521479353" fg:w="3447081"/><text x="90.2650%" y="463.50"></text></g><g><title>ip_list_rcv (3,447,081 samples, 0.12%)</title><rect x="90.0150%" y="437" width="0.1231%" height="15" fill="rgb(232,182,51)" fg:x="2521479353" fg:w="3447081"/><text x="90.2650%" y="447.50"></text></g><g><title>ip_sublist_rcv (3,447,081 samples, 0.12%)</title><rect x="90.0150%" y="421" width="0.1231%" height="15" fill="rgb(231,60,39)" fg:x="2521479353" fg:w="3447081"/><text x="90.2650%" y="431.50"></text></g><g><title>ip_sublist_rcv_finish (3,447,081 samples, 0.12%)</title><rect x="90.0150%" y="405" width="0.1231%" height="15" fill="rgb(208,69,12)" fg:x="2521479353" fg:w="3447081"/><text x="90.2650%" y="415.50"></text></g><g><title>ip_local_deliver (3,447,081 samples, 0.12%)</title><rect x="90.0150%" y="389" width="0.1231%" height="15" fill="rgb(235,93,37)" fg:x="2521479353" fg:w="3447081"/><text x="90.2650%" y="399.50"></text></g><g><title>ip_local_deliver_finish (3,447,081 samples, 0.12%)</title><rect x="90.0150%" y="373" width="0.1231%" height="15" fill="rgb(213,116,39)" fg:x="2521479353" fg:w="3447081"/><text x="90.2650%" y="383.50"></text></g><g><title>ip_protocol_deliver_rcu (3,447,081 samples, 0.12%)</title><rect x="90.0150%" y="357" width="0.1231%" height="15" fill="rgb(222,207,29)" fg:x="2521479353" fg:w="3447081"/><text x="90.2650%" y="367.50"></text></g><g><title>tcp_v4_rcv (3,447,081 samples, 0.12%)</title><rect x="90.0150%" y="341" width="0.1231%" height="15" fill="rgb(206,96,30)" fg:x="2521479353" fg:w="3447081"/><text x="90.2650%" y="351.50"></text></g><g><title>tcp_v4_do_rcv (3,447,081 samples, 0.12%)</title><rect x="90.0150%" y="325" width="0.1231%" height="15" fill="rgb(218,138,4)" fg:x="2521479353" fg:w="3447081"/><text x="90.2650%" y="335.50"></text></g><g><title>tcp_rcv_established (3,447,081 samples, 0.12%)</title><rect x="90.0150%" y="309" width="0.1231%" height="15" fill="rgb(250,191,14)" fg:x="2521479353" fg:w="3447081"/><text x="90.2650%" y="319.50"></text></g><g><title>tcp_data_queue (3,447,081 samples, 0.12%)</title><rect x="90.0150%" y="293" width="0.1231%" height="15" fill="rgb(239,60,40)" fg:x="2521479353" fg:w="3447081"/><text x="90.2650%" y="303.50"></text></g><g><title>tcp_data_ready (3,447,081 samples, 0.12%)</title><rect x="90.0150%" y="277" width="0.1231%" height="15" fill="rgb(206,27,48)" fg:x="2521479353" fg:w="3447081"/><text x="90.2650%" y="287.50"></text></g><g><title>sock_def_readable (3,447,081 samples, 0.12%)</title><rect x="90.0150%" y="261" width="0.1231%" height="15" fill="rgb(225,35,8)" fg:x="2521479353" fg:w="3447081"/><text x="90.2650%" y="271.50"></text></g><g><title>__wake_up_sync_key (3,447,081 samples, 0.12%)</title><rect x="90.0150%" y="245" width="0.1231%" height="15" fill="rgb(250,213,24)" fg:x="2521479353" fg:w="3447081"/><text x="90.2650%" y="255.50"></text></g><g><title>__wake_up_common_lock (3,447,081 samples, 0.12%)</title><rect x="90.0150%" y="229" width="0.1231%" height="15" fill="rgb(247,123,22)" fg:x="2521479353" fg:w="3447081"/><text x="90.2650%" y="239.50"></text></g><g><title>__wake_up_common (3,447,081 samples, 0.12%)</title><rect x="90.0150%" y="213" width="0.1231%" height="15" fill="rgb(231,138,38)" fg:x="2521479353" fg:w="3447081"/><text x="90.2650%" y="223.50"></text></g><g><title>ep_poll_callback (3,447,081 samples, 0.12%)</title><rect x="90.0150%" y="197" width="0.1231%" height="15" fill="rgb(231,145,46)" fg:x="2521479353" fg:w="3447081"/><text x="90.2650%" y="207.50"></text></g><g><title>__wake_up (3,447,081 samples, 0.12%)</title><rect x="90.0150%" y="181" width="0.1231%" height="15" fill="rgb(251,118,11)" fg:x="2521479353" fg:w="3447081"/><text x="90.2650%" y="191.50"></text></g><g><title>__wake_up_common_lock (3,447,081 samples, 0.12%)</title><rect x="90.0150%" y="165" width="0.1231%" height="15" fill="rgb(217,147,25)" fg:x="2521479353" fg:w="3447081"/><text x="90.2650%" y="175.50"></text></g><g><title>__wake_up_common (3,447,081 samples, 0.12%)</title><rect x="90.0150%" y="149" width="0.1231%" height="15" fill="rgb(247,81,37)" fg:x="2521479353" fg:w="3447081"/><text x="90.2650%" y="159.50"></text></g><g><title>ep_autoremove_wake_function (3,447,081 samples, 0.12%)</title><rect x="90.0150%" y="133" width="0.1231%" height="15" fill="rgb(209,12,38)" fg:x="2521479353" fg:w="3447081"/><text x="90.2650%" y="143.50"></text></g><g><title>default_wake_function (3,447,081 samples, 0.12%)</title><rect x="90.0150%" y="117" width="0.1231%" height="15" fill="rgb(227,1,9)" fg:x="2521479353" fg:w="3447081"/><text x="90.2650%" y="127.50"></text></g><g><title>try_to_wake_up (3,447,081 samples, 0.12%)</title><rect x="90.0150%" y="101" width="0.1231%" height="15" fill="rgb(248,47,43)" fg:x="2521479353" fg:w="3447081"/><text x="90.2650%" y="111.50"></text></g><g><title>ttwu_do_activate (3,447,081 samples, 0.12%)</title><rect x="90.0150%" y="85" width="0.1231%" height="15" fill="rgb(221,10,30)" fg:x="2521479353" fg:w="3447081"/><text x="90.2650%" y="95.50"></text></g><g><title>enqueue_task (3,447,081 samples, 0.12%)</title><rect x="90.0150%" y="69" width="0.1231%" height="15" fill="rgb(210,229,1)" fg:x="2521479353" fg:w="3447081"/><text x="90.2650%" y="79.50"></text></g><g><title>psi_task_change (3,447,081 samples, 0.12%)</title><rect x="90.0150%" y="53" width="0.1231%" height="15" fill="rgb(222,148,37)" fg:x="2521479353" fg:w="3447081"/><text x="90.2650%" y="63.50"></text></g><g><title>psi_group_change (3,447,081 samples, 0.12%)</title><rect x="90.0150%" y="37" width="0.1231%" height="15" fill="rgb(234,67,33)" fg:x="2521479353" fg:w="3447081"/><text x="90.2650%" y="47.50"></text></g><g><title>net_rx_action (3,571,147 samples, 0.13%)</title><rect x="92.4697%" y="533" width="0.1275%" height="15" fill="rgb(247,98,35)" fg:x="2590240486" fg:w="3571147"/><text x="92.7197%" y="543.50"></text></g><g><title>__napi_poll (3,571,147 samples, 0.13%)</title><rect x="92.4697%" y="517" width="0.1275%" height="15" fill="rgb(247,138,52)" fg:x="2590240486" fg:w="3571147"/><text x="92.7197%" y="527.50"></text></g><g><title>e1000e_poll (3,571,147 samples, 0.13%)</title><rect x="92.4697%" y="501" width="0.1275%" height="15" fill="rgb(213,79,30)" fg:x="2590240486" fg:w="3571147"/><text x="92.7197%" y="511.50"></text></g><g><title>e1000_clean_rx_irq (3,571,147 samples, 0.13%)</title><rect x="92.4697%" y="485" width="0.1275%" height="15" fill="rgb(246,177,23)" fg:x="2590240486" fg:w="3571147"/><text x="92.7197%" y="495.50"></text></g><g><title>[libgomp.so.1.0.0] (72,466,397 samples, 2.59%)</title><rect x="90.1380%" y="613" width="2.5870%" height="15" fill="rgb(230,62,27)" fg:x="2524926434" fg:w="72466397"/><text x="90.3880%" y="623.50">[l..</text></g><g><title>asm_common_interrupt (7,152,345 samples, 0.26%)</title><rect x="92.4697%" y="597" width="0.2553%" height="15" fill="rgb(216,154,8)" fg:x="2590240486" fg:w="7152345"/><text x="92.7197%" y="607.50"></text></g><g><title>common_interrupt (7,152,345 samples, 0.26%)</title><rect x="92.4697%" y="581" width="0.2553%" height="15" fill="rgb(244,35,45)" fg:x="2590240486" fg:w="7152345"/><text x="92.7197%" y="591.50"></text></g><g><title>irq_exit_rcu (7,152,345 samples, 0.26%)</title><rect x="92.4697%" y="565" width="0.2553%" height="15" fill="rgb(251,115,12)" fg:x="2590240486" fg:w="7152345"/><text x="92.7197%" y="575.50"></text></g><g><title>handle_softirqs (7,152,345 samples, 0.26%)</title><rect x="92.4697%" y="549" width="0.2553%" height="15" fill="rgb(240,54,50)" fg:x="2590240486" fg:w="7152345"/><text x="92.7197%" y="559.50"></text></g><g><title>net_tx_action (3,581,198 samples, 0.13%)</title><rect x="92.5972%" y="533" width="0.1278%" height="15" fill="rgb(233,84,52)" fg:x="2593811633" fg:w="3581198"/><text x="92.8472%" y="543.50"></text></g><g><title>__qdisc_run (3,581,198 samples, 0.13%)</title><rect x="92.5972%" y="517" width="0.1278%" height="15" fill="rgb(207,117,47)" fg:x="2593811633" fg:w="3581198"/><text x="92.8472%" y="527.50"></text></g><g><title>sch_direct_xmit (3,581,198 samples, 0.13%)</title><rect x="92.5972%" y="501" width="0.1278%" height="15" fill="rgb(249,43,39)" fg:x="2593811633" fg:w="3581198"/><text x="92.8472%" y="511.50"></text></g><g><title>dev_hard_start_xmit (3,581,198 samples, 0.13%)</title><rect x="92.5972%" y="485" width="0.1278%" height="15" fill="rgb(209,38,44)" fg:x="2593811633" fg:w="3581198"/><text x="92.8472%" y="495.50"></text></g><g><title>xmit_one.constprop.0 (3,581,198 samples, 0.13%)</title><rect x="92.5972%" y="469" width="0.1278%" height="15" fill="rgb(236,212,23)" fg:x="2593811633" fg:w="3581198"/><text x="92.8472%" y="479.50"></text></g><g><title>skb_clone_tx_timestamp (3,581,198 samples, 0.13%)</title><rect x="92.5972%" y="453" width="0.1278%" height="15" fill="rgb(242,79,21)" fg:x="2593811633" fg:w="3581198"/><text x="92.8472%" y="463.50"></text></g><g><title>main._omp_fn.1 (90,742,428 samples, 3.24%)</title><rect x="89.8891%" y="629" width="3.2394%" height="15" fill="rgb(211,96,35)" fg:x="2517954172" fg:w="90742428"/><text x="90.1391%" y="639.50">mai..</text></g><g><title>std::__detail::_Map_base&lt;int, std::pair&lt;int const, std::vector&lt;Particle*, std::allocator&lt;Particle*&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;int const, std::vector&lt;Particle*, std::allocator&lt;Particle*&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt;, true&gt;::operator[] (11,303,769 samples, 0.40%)</title><rect x="92.7250%" y="613" width="0.4035%" height="15" fill="rgb(253,215,40)" fg:x="2597392831" fg:w="11303769"/><text x="92.9750%" y="623.50"></text></g><g><title>operator new (3,744,413 samples, 0.13%)</title><rect x="92.9949%" y="597" width="0.1337%" height="15" fill="rgb(211,81,21)" fg:x="2604952187" fg:w="3744413"/><text x="93.2449%" y="607.50"></text></g><g><title>__GI___libc_malloc (3,744,413 samples, 0.13%)</title><rect x="92.9949%" y="581" width="0.1337%" height="15" fill="rgb(208,190,38)" fg:x="2604952187" fg:w="3744413"/><text x="93.2449%" y="591.50"></text></g><g><title>_int_malloc (3,744,413 samples, 0.13%)</title><rect x="92.9949%" y="565" width="0.1337%" height="15" fill="rgb(235,213,38)" fg:x="2604952187" fg:w="3744413"/><text x="93.2449%" y="575.50"></text></g><g><title>main._omp_fn.2 (3,783,467 samples, 0.14%)</title><rect x="93.1286%" y="629" width="0.1351%" height="15" fill="rgb(237,122,38)" fg:x="2608696600" fg:w="3783467"/><text x="93.3786%" y="639.50"></text></g><g><title>GOMP_parallel (116,476,212 samples, 4.16%)</title><rect x="89.6331%" y="645" width="4.1581%" height="15" fill="rgb(244,218,35)" fg:x="2510782191" fg:w="116476212"/><text x="89.8831%" y="655.50">GOMP_..</text></g><g><title>main._omp_fn.3 (14,778,336 samples, 0.53%)</title><rect x="93.2636%" y="629" width="0.5276%" height="15" fill="rgb(240,68,47)" fg:x="2612480067" fg:w="14778336"/><text x="93.5136%" y="639.50"></text></g><g><title>SimulationValidator::validate_step_firstpass (3,695,256 samples, 0.13%)</title><rect x="93.7912%" y="629" width="0.1319%" height="15" fill="rgb(210,16,53)" fg:x="2627258403" fg:w="3695256"/><text x="94.0412%" y="639.50"></text></g><g><title>std::vector&lt;Particle, std::allocator&lt;Particle&gt; &gt;::push_back (3,695,256 samples, 0.13%)</title><rect x="93.7912%" y="613" width="0.1319%" height="15" fill="rgb(235,124,12)" fg:x="2627258403" fg:w="3695256"/><text x="94.0412%" y="623.50"></text></g><g><title>SimulationValidator::is_nearly_particle_overlap (7,303,340 samples, 0.26%)</title><rect x="94.3220%" y="597" width="0.2607%" height="15" fill="rgb(224,169,11)" fg:x="2642125682" fg:w="7303340"/><text x="94.5720%" y="607.50"></text></g><g><title>std::vector&lt;Particle, std::allocator&lt;Particle&gt; &gt;::begin (3,721,886 samples, 0.13%)</title><rect x="94.5827%" y="597" width="0.1329%" height="15" fill="rgb(250,166,2)" fg:x="2649429022" fg:w="3721886"/><text x="94.8327%" y="607.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;Particle*, std::vector&lt;Particle, std::allocator&lt;Particle&gt; &gt; &gt;::__normal_iterator (3,721,886 samples, 0.13%)</title><rect x="94.5827%" y="581" width="0.1329%" height="15" fill="rgb(242,216,29)" fg:x="2649429022" fg:w="3721886"/><text x="94.8327%" y="591.50"></text></g><g><title>std::vector&lt;Particle, std::allocator&lt;Particle&gt; &gt;::end (3,516,455 samples, 0.13%)</title><rect x="94.7156%" y="597" width="0.1255%" height="15" fill="rgb(230,116,27)" fg:x="2653150908" fg:w="3516455"/><text x="94.9656%" y="607.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;Particle*, std::vector&lt;Particle, std::allocator&lt;Particle&gt; &gt; &gt;::__normal_iterator (3,516,455 samples, 0.13%)</title><rect x="94.7156%" y="581" width="0.1255%" height="15" fill="rgb(228,99,48)" fg:x="2653150908" fg:w="3516455"/><text x="94.9656%" y="591.50"></text></g><g><title>SimulationValidator::bfs_group (29,305,549 samples, 1.05%)</title><rect x="93.9231%" y="613" width="1.0462%" height="15" fill="rgb(253,11,6)" fg:x="2630953659" fg:w="29305549"/><text x="94.1731%" y="623.50"></text></g><g><title>std::vector&lt;bool, std::allocator&lt;bool&gt; &gt;::operator[] (3,591,845 samples, 0.13%)</title><rect x="94.8411%" y="597" width="0.1282%" height="15" fill="rgb(247,143,39)" fg:x="2656667363" fg:w="3591845"/><text x="95.0911%" y="607.50"></text></g><g><title>std::_Bit_iterator::operator[] (3,591,845 samples, 0.13%)</title><rect x="94.8411%" y="581" width="0.1282%" height="15" fill="rgb(236,97,10)" fg:x="2656667363" fg:w="3591845"/><text x="95.0911%" y="591.50"></text></g><g><title>std::operator+ (3,591,845 samples, 0.13%)</title><rect x="94.8411%" y="565" width="0.1282%" height="15" fill="rgb(233,208,19)" fg:x="2656667363" fg:w="3591845"/><text x="95.0911%" y="575.50"></text></g><g><title>std::_Bit_iterator::operator+= (3,591,845 samples, 0.13%)</title><rect x="94.8411%" y="549" width="0.1282%" height="15" fill="rgb(216,164,2)" fg:x="2656667363" fg:w="3591845"/><text x="95.0911%" y="559.50"></text></g><g><title>std::_Bit_iterator_base::_M_incr (3,591,845 samples, 0.13%)</title><rect x="94.8411%" y="533" width="0.1282%" height="15" fill="rgb(220,129,5)" fg:x="2656667363" fg:w="3591845"/><text x="95.0911%" y="543.50"></text></g><g><title>asm_common_interrupt (3,591,845 samples, 0.13%)</title><rect x="94.8411%" y="517" width="0.1282%" height="15" fill="rgb(242,17,10)" fg:x="2656667363" fg:w="3591845"/><text x="95.0911%" y="527.50"></text></g><g><title>common_interrupt (3,591,845 samples, 0.13%)</title><rect x="94.8411%" y="501" width="0.1282%" height="15" fill="rgb(242,107,0)" fg:x="2656667363" fg:w="3591845"/><text x="95.0911%" y="511.50"></text></g><g><title>irq_exit_rcu (3,591,845 samples, 0.13%)</title><rect x="94.8411%" y="485" width="0.1282%" height="15" fill="rgb(251,28,31)" fg:x="2656667363" fg:w="3591845"/><text x="95.0911%" y="495.50"></text></g><g><title>handle_softirqs (3,591,845 samples, 0.13%)</title><rect x="94.8411%" y="469" width="0.1282%" height="15" fill="rgb(233,223,10)" fg:x="2656667363" fg:w="3591845"/><text x="95.0911%" y="479.50"></text></g><g><title>net_tx_action (3,591,845 samples, 0.13%)</title><rect x="94.8411%" y="453" width="0.1282%" height="15" fill="rgb(215,21,27)" fg:x="2656667363" fg:w="3591845"/><text x="95.0911%" y="463.50"></text></g><g><title>__qdisc_run (3,591,845 samples, 0.13%)</title><rect x="94.8411%" y="437" width="0.1282%" height="15" fill="rgb(232,23,21)" fg:x="2656667363" fg:w="3591845"/><text x="95.0911%" y="447.50"></text></g><g><title>sch_direct_xmit (3,591,845 samples, 0.13%)</title><rect x="94.8411%" y="421" width="0.1282%" height="15" fill="rgb(244,5,23)" fg:x="2656667363" fg:w="3591845"/><text x="95.0911%" y="431.50"></text></g><g><title>validate_xmit_skb_list (3,591,845 samples, 0.13%)</title><rect x="94.8411%" y="405" width="0.1282%" height="15" fill="rgb(226,81,46)" fg:x="2656667363" fg:w="3591845"/><text x="95.0911%" y="415.50"></text></g><g><title>validate_xmit_skb (3,591,845 samples, 0.13%)</title><rect x="94.8411%" y="389" width="0.1282%" height="15" fill="rgb(247,70,30)" fg:x="2656667363" fg:w="3591845"/><text x="95.0911%" y="399.50"></text></g><g><title>__skb_gso_segment (3,591,845 samples, 0.13%)</title><rect x="94.8411%" y="373" width="0.1282%" height="15" fill="rgb(212,68,19)" fg:x="2656667363" fg:w="3591845"/><text x="95.0911%" y="383.50"></text></g><g><title>skb_mac_gso_segment (3,591,845 samples, 0.13%)</title><rect x="94.8411%" y="357" width="0.1282%" height="15" fill="rgb(240,187,13)" fg:x="2656667363" fg:w="3591845"/><text x="95.0911%" y="367.50"></text></g><g><title>inet_gso_segment (3,591,845 samples, 0.13%)</title><rect x="94.8411%" y="341" width="0.1282%" height="15" fill="rgb(223,113,26)" fg:x="2656667363" fg:w="3591845"/><text x="95.0911%" y="351.50"></text></g><g><title>tcp4_gso_segment (3,591,845 samples, 0.13%)</title><rect x="94.8411%" y="325" width="0.1282%" height="15" fill="rgb(206,192,2)" fg:x="2656667363" fg:w="3591845"/><text x="95.0911%" y="335.50"></text></g><g><title>tcp_gso_segment (3,591,845 samples, 0.13%)</title><rect x="94.8411%" y="309" width="0.1282%" height="15" fill="rgb(241,108,4)" fg:x="2656667363" fg:w="3591845"/><text x="95.0911%" y="319.50"></text></g><g><title>skb_segment (3,591,845 samples, 0.13%)</title><rect x="94.8411%" y="293" width="0.1282%" height="15" fill="rgb(247,173,49)" fg:x="2656667363" fg:w="3591845"/><text x="95.0911%" y="303.50"></text></g><g><title>__alloc_skb (3,591,845 samples, 0.13%)</title><rect x="94.8411%" y="277" width="0.1282%" height="15" fill="rgb(224,114,35)" fg:x="2656667363" fg:w="3591845"/><text x="95.0911%" y="287.50"></text></g><g><title>kmalloc_reserve (3,591,845 samples, 0.13%)</title><rect x="94.8411%" y="261" width="0.1282%" height="15" fill="rgb(245,159,27)" fg:x="2656667363" fg:w="3591845"/><text x="95.0911%" y="271.50"></text></g><g><title>__kmalloc_node_track_caller (3,591,845 samples, 0.13%)</title><rect x="94.8411%" y="245" width="0.1282%" height="15" fill="rgb(245,172,44)" fg:x="2656667363" fg:w="3591845"/><text x="95.0911%" y="255.50"></text></g><g><title>___slab_alloc (3,591,845 samples, 0.13%)</title><rect x="94.8411%" y="229" width="0.1282%" height="15" fill="rgb(236,23,11)" fg:x="2656667363" fg:w="3591845"/><text x="95.0911%" y="239.50"></text></g><g><title>get_partial_node.part.0 (3,591,845 samples, 0.13%)</title><rect x="94.8411%" y="213" width="0.1282%" height="15" fill="rgb(205,117,38)" fg:x="2656667363" fg:w="3591845"/><text x="95.0911%" y="223.50"></text></g><g><title>std::vector&lt;Particle, std::allocator&lt;Particle&gt; &gt;::end (3,663,953 samples, 0.13%)</title><rect x="94.9693%" y="613" width="0.1308%" height="15" fill="rgb(237,72,25)" fg:x="2660259208" fg:w="3663953"/><text x="95.2193%" y="623.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;Particle*, std::vector&lt;Particle, std::allocator&lt;Particle&gt; &gt; &gt;::__normal_iterator (3,663,953 samples, 0.13%)</title><rect x="94.9693%" y="597" width="0.1308%" height="15" fill="rgb(244,70,9)" fg:x="2660259208" fg:w="3663953"/><text x="95.2193%" y="607.50"></text></g><g><title>SimulationValidator::validate_step (40,129,007 samples, 1.43%)</title><rect x="93.7912%" y="645" width="1.4326%" height="15" fill="rgb(217,125,39)" fg:x="2627258403" fg:w="40129007"/><text x="94.0412%" y="655.50"></text></g><g><title>SimulationValidator::validate_step_secondpass (36,433,751 samples, 1.30%)</title><rect x="93.9231%" y="629" width="1.3007%" height="15" fill="rgb(235,36,10)" fg:x="2630953659" fg:w="36433751"/><text x="94.1731%" y="639.50"></text></g><g><title>std::vector&lt;bool, std::allocator&lt;bool&gt; &gt;::operator[] (3,464,249 samples, 0.12%)</title><rect x="95.1001%" y="613" width="0.1237%" height="15" fill="rgb(251,123,47)" fg:x="2663923161" fg:w="3464249"/><text x="95.3501%" y="623.50"></text></g><g><title>[libgomp.so.1.0.0] (10,862,742 samples, 0.39%)</title><rect x="95.2238%" y="645" width="0.3878%" height="15" fill="rgb(221,13,13)" fg:x="2667387410" fg:w="10862742"/><text x="95.4738%" y="655.50"></text></g><g><title>[libgomp.so.1.0.0] (10,862,742 samples, 0.39%)</title><rect x="95.2238%" y="629" width="0.3878%" height="15" fill="rgb(238,131,9)" fg:x="2667387410" fg:w="10862742"/><text x="95.4738%" y="639.50"></text></g><g><title>__GI___libc_free (40,735,435 samples, 1.45%)</title><rect x="95.6116%" y="645" width="1.4542%" height="15" fill="rgb(211,50,8)" fg:x="2678250152" fg:w="40735435"/><text x="95.8616%" y="655.50"></text></g><g><title>_int_free (40,735,435 samples, 1.45%)</title><rect x="95.6116%" y="629" width="1.4542%" height="15" fill="rgb(245,182,24)" fg:x="2678250152" fg:w="40735435"/><text x="95.8616%" y="639.50"></text></g><g><title>asm_common_interrupt (3,481,376 samples, 0.12%)</title><rect x="96.9415%" y="613" width="0.1243%" height="15" fill="rgb(242,14,37)" fg:x="2715504211" fg:w="3481376"/><text x="97.1915%" y="623.50"></text></g><g><title>common_interrupt (3,481,376 samples, 0.12%)</title><rect x="96.9415%" y="597" width="0.1243%" height="15" fill="rgb(246,228,12)" fg:x="2715504211" fg:w="3481376"/><text x="97.1915%" y="607.50"></text></g><g><title>irq_exit_rcu (3,481,376 samples, 0.12%)</title><rect x="96.9415%" y="581" width="0.1243%" height="15" fill="rgb(213,55,15)" fg:x="2715504211" fg:w="3481376"/><text x="97.1915%" y="591.50"></text></g><g><title>handle_softirqs (3,481,376 samples, 0.12%)</title><rect x="96.9415%" y="565" width="0.1243%" height="15" fill="rgb(209,9,3)" fg:x="2715504211" fg:w="3481376"/><text x="97.1915%" y="575.50"></text></g><g><title>net_rx_action (3,481,376 samples, 0.12%)</title><rect x="96.9415%" y="549" width="0.1243%" height="15" fill="rgb(230,59,30)" fg:x="2715504211" fg:w="3481376"/><text x="97.1915%" y="559.50"></text></g><g><title>__napi_poll (3,481,376 samples, 0.12%)</title><rect x="96.9415%" y="533" width="0.1243%" height="15" fill="rgb(209,121,21)" fg:x="2715504211" fg:w="3481376"/><text x="97.1915%" y="543.50"></text></g><g><title>e1000e_poll (3,481,376 samples, 0.12%)</title><rect x="96.9415%" y="517" width="0.1243%" height="15" fill="rgb(220,109,13)" fg:x="2715504211" fg:w="3481376"/><text x="97.1915%" y="527.50"></text></g><g><title>e1000_clean_tx_irq (3,481,376 samples, 0.12%)</title><rect x="96.9415%" y="501" width="0.1243%" height="15" fill="rgb(232,18,1)" fg:x="2715504211" fg:w="3481376"/><text x="97.1915%" y="511.50"></text></g><g><title>malloc_consolidate (11,382,666 samples, 0.41%)</title><rect x="97.7442%" y="597" width="0.4064%" height="15" fill="rgb(215,41,42)" fg:x="2737989372" fg:w="11382666"/><text x="97.9942%" y="607.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (3,597,433 samples, 0.13%)</title><rect x="98.0222%" y="581" width="0.1284%" height="15" fill="rgb(224,123,36)" fg:x="2745774605" fg:w="3597433"/><text x="98.2722%" y="591.50"></text></g><g><title>sysvec_apic_timer_interrupt (3,597,433 samples, 0.13%)</title><rect x="98.0222%" y="565" width="0.1284%" height="15" fill="rgb(240,125,3)" fg:x="2745774605" fg:w="3597433"/><text x="98.2722%" y="575.50"></text></g><g><title>__sysvec_apic_timer_interrupt (3,597,433 samples, 0.13%)</title><rect x="98.0222%" y="549" width="0.1284%" height="15" fill="rgb(205,98,50)" fg:x="2745774605" fg:w="3597433"/><text x="98.2722%" y="559.50"></text></g><g><title>hrtimer_interrupt (3,597,433 samples, 0.13%)</title><rect x="98.0222%" y="533" width="0.1284%" height="15" fill="rgb(205,185,37)" fg:x="2745774605" fg:w="3597433"/><text x="98.2722%" y="543.50"></text></g><g><title>__hrtimer_run_queues (3,597,433 samples, 0.13%)</title><rect x="98.0222%" y="517" width="0.1284%" height="15" fill="rgb(238,207,15)" fg:x="2745774605" fg:w="3597433"/><text x="98.2722%" y="527.50"></text></g><g><title>operator new (34,109,892 samples, 1.22%)</title><rect x="97.0658%" y="645" width="1.2177%" height="15" fill="rgb(213,199,42)" fg:x="2718985587" fg:w="34109892"/><text x="97.3158%" y="655.50"></text></g><g><title>__GI___libc_malloc (34,109,892 samples, 1.22%)</title><rect x="97.0658%" y="629" width="1.2177%" height="15" fill="rgb(235,201,11)" fg:x="2718985587" fg:w="34109892"/><text x="97.3158%" y="639.50"></text></g><g><title>_int_malloc (22,434,727 samples, 0.80%)</title><rect x="97.4826%" y="613" width="0.8009%" height="15" fill="rgb(207,46,11)" fg:x="2730660752" fg:w="22434727"/><text x="97.7326%" y="623.50"></text></g><g><title>sysmalloc (3,723,441 samples, 0.13%)</title><rect x="98.1506%" y="597" width="0.1329%" height="15" fill="rgb(241,35,35)" fg:x="2749372038" fg:w="3723441"/><text x="98.4006%" y="607.50"></text></g><g><title>__glibc_morecore (3,723,441 samples, 0.13%)</title><rect x="98.1506%" y="581" width="0.1329%" height="15" fill="rgb(243,32,47)" fg:x="2749372038" fg:w="3723441"/><text x="98.4006%" y="591.50"></text></g><g><title>__GI___sbrk (3,723,441 samples, 0.13%)</title><rect x="98.1506%" y="565" width="0.1329%" height="15" fill="rgb(247,202,23)" fg:x="2749372038" fg:w="3723441"/><text x="98.4006%" y="575.50"></text></g><g><title>__GI___sbrk (3,723,441 samples, 0.13%)</title><rect x="98.1506%" y="549" width="0.1329%" height="15" fill="rgb(219,102,11)" fg:x="2749372038" fg:w="3723441"/><text x="98.4006%" y="559.50"></text></g><g><title>__brk (3,723,441 samples, 0.13%)</title><rect x="98.1506%" y="533" width="0.1329%" height="15" fill="rgb(243,110,44)" fg:x="2749372038" fg:w="3723441"/><text x="98.4006%" y="543.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (3,723,441 samples, 0.13%)</title><rect x="98.1506%" y="517" width="0.1329%" height="15" fill="rgb(222,74,54)" fg:x="2749372038" fg:w="3723441"/><text x="98.4006%" y="527.50"></text></g><g><title>do_syscall_64 (3,723,441 samples, 0.13%)</title><rect x="98.1506%" y="501" width="0.1329%" height="15" fill="rgb(216,99,12)" fg:x="2749372038" fg:w="3723441"/><text x="98.4006%" y="511.50"></text></g><g><title>x64_sys_call (3,723,441 samples, 0.13%)</title><rect x="98.1506%" y="485" width="0.1329%" height="15" fill="rgb(226,22,26)" fg:x="2749372038" fg:w="3723441"/><text x="98.4006%" y="495.50"></text></g><g><title>__x64_sys_brk (3,723,441 samples, 0.13%)</title><rect x="98.1506%" y="469" width="0.1329%" height="15" fill="rgb(217,163,10)" fg:x="2749372038" fg:w="3723441"/><text x="98.4006%" y="479.50"></text></g><g><title>__do_sys_brk (3,723,441 samples, 0.13%)</title><rect x="98.1506%" y="453" width="0.1329%" height="15" fill="rgb(213,25,53)" fg:x="2749372038" fg:w="3723441"/><text x="98.4006%" y="463.50"></text></g><g><title>do_brk_flags (3,723,441 samples, 0.13%)</title><rect x="98.1506%" y="437" width="0.1329%" height="15" fill="rgb(252,105,26)" fg:x="2749372038" fg:w="3723441"/><text x="98.4006%" y="447.50"></text></g><g><title>cap_vm_enough_memory (3,723,441 samples, 0.13%)</title><rect x="98.1506%" y="421" width="0.1329%" height="15" fill="rgb(220,39,43)" fg:x="2749372038" fg:w="3723441"/><text x="98.4006%" y="431.50"></text></g><g><title>[sim] (3,543,006 samples, 0.13%)</title><rect x="98.2835%" y="629" width="0.1265%" height="15" fill="rgb(229,68,48)" fg:x="2753095479" fg:w="3543006"/><text x="98.5335%" y="639.50"></text></g><g><title>net_rx_action (3,700,372 samples, 0.13%)</title><rect x="98.4100%" y="549" width="0.1321%" height="15" fill="rgb(252,8,32)" fg:x="2756638485" fg:w="3700372"/><text x="98.6600%" y="559.50"></text></g><g><title>__napi_poll (3,700,372 samples, 0.13%)</title><rect x="98.4100%" y="533" width="0.1321%" height="15" fill="rgb(223,20,43)" fg:x="2756638485" fg:w="3700372"/><text x="98.6600%" y="543.50"></text></g><g><title>e1000e_poll (3,700,372 samples, 0.13%)</title><rect x="98.4100%" y="517" width="0.1321%" height="15" fill="rgb(229,81,49)" fg:x="2756638485" fg:w="3700372"/><text x="98.6600%" y="527.50"></text></g><g><title>napi_complete_done (3,700,372 samples, 0.13%)</title><rect x="98.4100%" y="501" width="0.1321%" height="15" fill="rgb(236,28,36)" fg:x="2756638485" fg:w="3700372"/><text x="98.6600%" y="511.50"></text></g><g><title>netif_receive_skb_list_internal (3,700,372 samples, 0.13%)</title><rect x="98.4100%" y="485" width="0.1321%" height="15" fill="rgb(249,185,26)" fg:x="2756638485" fg:w="3700372"/><text x="98.6600%" y="495.50"></text></g><g><title>__netif_receive_skb_list_core (3,700,372 samples, 0.13%)</title><rect x="98.4100%" y="469" width="0.1321%" height="15" fill="rgb(249,174,33)" fg:x="2756638485" fg:w="3700372"/><text x="98.6600%" y="479.50"></text></g><g><title>ip_list_rcv (3,700,372 samples, 0.13%)</title><rect x="98.4100%" y="453" width="0.1321%" height="15" fill="rgb(233,201,37)" fg:x="2756638485" fg:w="3700372"/><text x="98.6600%" y="463.50"></text></g><g><title>ip_sublist_rcv (3,700,372 samples, 0.13%)</title><rect x="98.4100%" y="437" width="0.1321%" height="15" fill="rgb(221,78,26)" fg:x="2756638485" fg:w="3700372"/><text x="98.6600%" y="447.50"></text></g><g><title>ip_sublist_rcv_finish (3,700,372 samples, 0.13%)</title><rect x="98.4100%" y="421" width="0.1321%" height="15" fill="rgb(250,127,30)" fg:x="2756638485" fg:w="3700372"/><text x="98.6600%" y="431.50"></text></g><g><title>ip_local_deliver (3,700,372 samples, 0.13%)</title><rect x="98.4100%" y="405" width="0.1321%" height="15" fill="rgb(230,49,44)" fg:x="2756638485" fg:w="3700372"/><text x="98.6600%" y="415.50"></text></g><g><title>ip_local_deliver_finish (3,700,372 samples, 0.13%)</title><rect x="98.4100%" y="389" width="0.1321%" height="15" fill="rgb(229,67,23)" fg:x="2756638485" fg:w="3700372"/><text x="98.6600%" y="399.50"></text></g><g><title>ip_protocol_deliver_rcu (3,700,372 samples, 0.13%)</title><rect x="98.4100%" y="373" width="0.1321%" height="15" fill="rgb(249,83,47)" fg:x="2756638485" fg:w="3700372"/><text x="98.6600%" y="383.50"></text></g><g><title>tcp_v4_rcv (3,700,372 samples, 0.13%)</title><rect x="98.4100%" y="357" width="0.1321%" height="15" fill="rgb(215,43,3)" fg:x="2756638485" fg:w="3700372"/><text x="98.6600%" y="367.50"></text></g><g><title>asm_common_interrupt (7,285,192 samples, 0.26%)</title><rect x="98.4100%" y="613" width="0.2601%" height="15" fill="rgb(238,154,13)" fg:x="2756638485" fg:w="7285192"/><text x="98.6600%" y="623.50"></text></g><g><title>common_interrupt (7,285,192 samples, 0.26%)</title><rect x="98.4100%" y="597" width="0.2601%" height="15" fill="rgb(219,56,2)" fg:x="2756638485" fg:w="7285192"/><text x="98.6600%" y="607.50"></text></g><g><title>irq_exit_rcu (7,285,192 samples, 0.26%)</title><rect x="98.4100%" y="581" width="0.2601%" height="15" fill="rgb(233,0,4)" fg:x="2756638485" fg:w="7285192"/><text x="98.6600%" y="591.50"></text></g><g><title>handle_softirqs (7,285,192 samples, 0.26%)</title><rect x="98.4100%" y="565" width="0.2601%" height="15" fill="rgb(235,30,7)" fg:x="2756638485" fg:w="7285192"/><text x="98.6600%" y="575.50"></text></g><g><title>net_tx_action (3,584,820 samples, 0.13%)</title><rect x="98.5421%" y="549" width="0.1280%" height="15" fill="rgb(250,79,13)" fg:x="2760338857" fg:w="3584820"/><text x="98.7921%" y="559.50"></text></g><g><title>__qdisc_run (3,584,820 samples, 0.13%)</title><rect x="98.5421%" y="533" width="0.1280%" height="15" fill="rgb(211,146,34)" fg:x="2760338857" fg:w="3584820"/><text x="98.7921%" y="543.50"></text></g><g><title>sch_direct_xmit (3,584,820 samples, 0.13%)</title><rect x="98.5421%" y="517" width="0.1280%" height="15" fill="rgb(228,22,38)" fg:x="2760338857" fg:w="3584820"/><text x="98.7921%" y="527.50"></text></g><g><title>dev_hard_start_xmit (3,584,820 samples, 0.13%)</title><rect x="98.5421%" y="501" width="0.1280%" height="15" fill="rgb(235,168,5)" fg:x="2760338857" fg:w="3584820"/><text x="98.7921%" y="511.50"></text></g><g><title>xmit_one.constprop.0 (3,584,820 samples, 0.13%)</title><rect x="98.5421%" y="485" width="0.1280%" height="15" fill="rgb(221,155,16)" fg:x="2760338857" fg:w="3584820"/><text x="98.7921%" y="495.50"></text></g><g><title>e1000_tso (3,584,820 samples, 0.13%)</title><rect x="98.5421%" y="469" width="0.1280%" height="15" fill="rgb(215,215,53)" fg:x="2760338857" fg:w="3584820"/><text x="98.7921%" y="479.50"></text></g><g><title>std::__ostream_insert&lt;char, std::char_traits&lt;char&gt; &gt; (11,235,078 samples, 0.40%)</title><rect x="98.4100%" y="629" width="0.4011%" height="15" fill="rgb(223,4,10)" fg:x="2756638485" fg:w="11235078"/><text x="98.6600%" y="639.50"></text></g><g><title>std::ostream::sentry::sentry (3,949,886 samples, 0.14%)</title><rect x="98.6701%" y="613" width="0.1410%" height="15" fill="rgb(234,103,6)" fg:x="2763923677" fg:w="3949886"/><text x="98.9201%" y="623.50"></text></g><g><title>std::ostream::_M_insert&lt;long&gt; (7,456,471 samples, 0.27%)</title><rect x="98.8111%" y="629" width="0.2662%" height="15" fill="rgb(227,97,0)" fg:x="2767873563" fg:w="7456471"/><text x="99.0611%" y="639.50"></text></g><g><title>print_particles (25,852,100 samples, 0.92%)</title><rect x="98.2835%" y="645" width="0.9229%" height="15" fill="rgb(234,150,53)" fg:x="2753095479" fg:w="25852100"/><text x="98.5335%" y="655.50"></text></g><g><title>std::ostream::flush (3,617,545 samples, 0.13%)</title><rect x="99.0773%" y="629" width="0.1291%" height="15" fill="rgb(228,201,54)" fg:x="2775330034" fg:w="3617545"/><text x="99.3273%" y="639.50"></text></g><g><title>[libstdc++.so.6.0.30] (3,617,545 samples, 0.13%)</title><rect x="99.0773%" y="613" width="0.1291%" height="15" fill="rgb(222,22,37)" fg:x="2775330034" fg:w="3617545"/><text x="99.3273%" y="623.50"></text></g><g><title>asm_exc_page_fault (4,585,871 samples, 0.16%)</title><rect x="99.2064%" y="629" width="0.1637%" height="15" fill="rgb(237,53,32)" fg:x="2778947579" fg:w="4585871"/><text x="99.4564%" y="639.50"></text></g><g><title>exc_page_fault (4,585,871 samples, 0.16%)</title><rect x="99.2064%" y="613" width="0.1637%" height="15" fill="rgb(233,25,53)" fg:x="2778947579" fg:w="4585871"/><text x="99.4564%" y="623.50"></text></g><g><title>do_user_addr_fault (4,585,871 samples, 0.16%)</title><rect x="99.2064%" y="597" width="0.1637%" height="15" fill="rgb(210,40,34)" fg:x="2778947579" fg:w="4585871"/><text x="99.4564%" y="607.50"></text></g><g><title>handle_mm_fault (4,585,871 samples, 0.16%)</title><rect x="99.2064%" y="581" width="0.1637%" height="15" fill="rgb(241,220,44)" fg:x="2778947579" fg:w="4585871"/><text x="99.4564%" y="591.50"></text></g><g><title>__handle_mm_fault (4,585,871 samples, 0.16%)</title><rect x="99.2064%" y="565" width="0.1637%" height="15" fill="rgb(235,28,35)" fg:x="2778947579" fg:w="4585871"/><text x="99.4564%" y="575.50"></text></g><g><title>handle_pte_fault (4,585,871 samples, 0.16%)</title><rect x="99.2064%" y="549" width="0.1637%" height="15" fill="rgb(210,56,17)" fg:x="2778947579" fg:w="4585871"/><text x="99.4564%" y="559.50"></text></g><g><title>do_anonymous_page (4,585,871 samples, 0.16%)</title><rect x="99.2064%" y="533" width="0.1637%" height="15" fill="rgb(224,130,29)" fg:x="2778947579" fg:w="4585871"/><text x="99.4564%" y="543.50"></text></g><g><title>lru_cache_add_inactive_or_unevictable (4,585,871 samples, 0.16%)</title><rect x="99.2064%" y="517" width="0.1637%" height="15" fill="rgb(235,212,8)" fg:x="2778947579" fg:w="4585871"/><text x="99.4564%" y="527.50"></text></g><g><title>lru_cache_add (4,585,871 samples, 0.16%)</title><rect x="99.2064%" y="501" width="0.1637%" height="15" fill="rgb(223,33,50)" fg:x="2778947579" fg:w="4585871"/><text x="99.4564%" y="511.50"></text></g><g><title>__pagevec_lru_add (4,585,871 samples, 0.16%)</title><rect x="99.2064%" y="485" width="0.1637%" height="15" fill="rgb(219,149,13)" fg:x="2778947579" fg:w="4585871"/><text x="99.4564%" y="495.50"></text></g><g><title>__pagevec_lru_add_fn (4,585,871 samples, 0.16%)</title><rect x="99.2064%" y="469" width="0.1637%" height="15" fill="rgb(250,156,29)" fg:x="2778947579" fg:w="4585871"/><text x="99.4564%" y="479.50"></text></g><g><title>__mod_node_page_state (4,585,871 samples, 0.16%)</title><rect x="99.2064%" y="453" width="0.1637%" height="15" fill="rgb(216,193,19)" fg:x="2778947579" fg:w="4585871"/><text x="99.4564%" y="463.50"></text></g><g><title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::close (3,824,870 samples, 0.14%)</title><rect x="99.3701%" y="629" width="0.1365%" height="15" fill="rgb(216,135,14)" fg:x="2783533450" fg:w="3824870"/><text x="99.6201%" y="639.50"></text></g><g><title>std::__basic_file&lt;char&gt;::close (3,824,870 samples, 0.14%)</title><rect x="99.3701%" y="613" width="0.1365%" height="15" fill="rgb(241,47,5)" fg:x="2783533450" fg:w="3824870"/><text x="99.6201%" y="623.50"></text></g><g><title>_IO_new_fclose (3,824,870 samples, 0.14%)</title><rect x="99.3701%" y="597" width="0.1365%" height="15" fill="rgb(233,42,35)" fg:x="2783533450" fg:w="3824870"/><text x="99.6201%" y="607.50"></text></g><g><title>_IO_new_file_close_it (3,824,870 samples, 0.14%)</title><rect x="99.3701%" y="581" width="0.1365%" height="15" fill="rgb(231,13,6)" fg:x="2783533450" fg:w="3824870"/><text x="99.6201%" y="591.50"></text></g><g><title>__GI___close_nocancel (3,824,870 samples, 0.14%)</title><rect x="99.3701%" y="565" width="0.1365%" height="15" fill="rgb(207,181,40)" fg:x="2783533450" fg:w="3824870"/><text x="99.6201%" y="575.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (3,824,870 samples, 0.14%)</title><rect x="99.3701%" y="549" width="0.1365%" height="15" fill="rgb(254,173,49)" fg:x="2783533450" fg:w="3824870"/><text x="99.6201%" y="559.50"></text></g><g><title>do_syscall_64 (3,824,870 samples, 0.14%)</title><rect x="99.3701%" y="533" width="0.1365%" height="15" fill="rgb(221,1,38)" fg:x="2783533450" fg:w="3824870"/><text x="99.6201%" y="543.50"></text></g><g><title>x64_sys_call (3,824,870 samples, 0.14%)</title><rect x="99.3701%" y="517" width="0.1365%" height="15" fill="rgb(206,124,46)" fg:x="2783533450" fg:w="3824870"/><text x="99.6201%" y="527.50"></text></g><g><title>__x64_sys_close (3,824,870 samples, 0.14%)</title><rect x="99.3701%" y="501" width="0.1365%" height="15" fill="rgb(249,21,11)" fg:x="2783533450" fg:w="3824870"/><text x="99.6201%" y="511.50"></text></g><g><title>close_fd (3,824,870 samples, 0.14%)</title><rect x="99.3701%" y="485" width="0.1365%" height="15" fill="rgb(222,201,40)" fg:x="2783533450" fg:w="3824870"/><text x="99.6201%" y="495.50"></text></g><g><title>filp_close (3,824,870 samples, 0.14%)</title><rect x="99.3701%" y="469" width="0.1365%" height="15" fill="rgb(235,61,29)" fg:x="2783533450" fg:w="3824870"/><text x="99.6201%" y="479.50"></text></g><g><title>fuse_flush (3,824,870 samples, 0.14%)</title><rect x="99.3701%" y="453" width="0.1365%" height="15" fill="rgb(219,207,3)" fg:x="2783533450" fg:w="3824870"/><text x="99.6201%" y="463.50"></text></g><g><title>fuse_simple_request (3,824,870 samples, 0.14%)</title><rect x="99.3701%" y="437" width="0.1365%" height="15" fill="rgb(222,56,46)" fg:x="2783533450" fg:w="3824870"/><text x="99.6201%" y="447.50"></text></g><g><title>request_wait_answer (3,824,870 samples, 0.14%)</title><rect x="99.3701%" y="421" width="0.1365%" height="15" fill="rgb(239,76,54)" fg:x="2783533450" fg:w="3824870"/><text x="99.6201%" y="431.50"></text></g><g><title>schedule (3,824,870 samples, 0.14%)</title><rect x="99.3701%" y="405" width="0.1365%" height="15" fill="rgb(231,124,27)" fg:x="2783533450" fg:w="3824870"/><text x="99.6201%" y="415.50"></text></g><g><title>__schedule (3,824,870 samples, 0.14%)</title><rect x="99.3701%" y="389" width="0.1365%" height="15" fill="rgb(249,195,6)" fg:x="2783533450" fg:w="3824870"/><text x="99.6201%" y="399.50"></text></g><g><title>finish_task_switch.isra.0 (3,824,870 samples, 0.14%)</title><rect x="99.3701%" y="373" width="0.1365%" height="15" fill="rgb(237,174,47)" fg:x="2783533450" fg:w="3824870"/><text x="99.6201%" y="383.50"></text></g><g><title>__perf_event_task_sched_in (3,824,870 samples, 0.14%)</title><rect x="99.3701%" y="357" width="0.1365%" height="15" fill="rgb(206,201,31)" fg:x="2783533450" fg:w="3824870"/><text x="99.6201%" y="367.50"></text></g><g><title>x86_pmu_enable (3,824,870 samples, 0.14%)</title><rect x="99.3701%" y="341" width="0.1365%" height="15" fill="rgb(231,57,52)" fg:x="2783533450" fg:w="3824870"/><text x="99.6201%" y="351.50"></text></g><g><title>intel_pmu_enable_all (3,824,870 samples, 0.14%)</title><rect x="99.3701%" y="325" width="0.1365%" height="15" fill="rgb(248,177,22)" fg:x="2783533450" fg:w="3824870"/><text x="99.6201%" y="335.50"></text></g><g><title>native_write_msr (3,824,870 samples, 0.14%)</title><rect x="99.3701%" y="309" width="0.1365%" height="15" fill="rgb(215,211,37)" fg:x="2783533450" fg:w="3824870"/><text x="99.6201%" y="319.50"></text></g><g><title>__libc_start_main_impl (280,631,290 samples, 10.02%)</title><rect x="89.4948%" y="693" width="10.0183%" height="15" fill="rgb(241,128,51)" fg:x="2506908125" fg:w="280631290"/><text x="89.7448%" y="703.50">__libc_start_m..</text></g><g><title>__libc_start_call_main (280,631,290 samples, 10.02%)</title><rect x="89.4948%" y="677" width="10.0183%" height="15" fill="rgb(227,165,31)" fg:x="2506908125" fg:w="280631290"/><text x="89.7448%" y="687.50">__libc_start_c..</text></g><g><title>main (280,631,290 samples, 10.02%)</title><rect x="89.4948%" y="661" width="10.0183%" height="15" fill="rgb(228,167,24)" fg:x="2506908125" fg:w="280631290"/><text x="89.7448%" y="671.50">main</text></g><g><title>read_args (8,591,836 samples, 0.31%)</title><rect x="99.2064%" y="645" width="0.3067%" height="15" fill="rgb(228,143,12)" fg:x="2778947579" fg:w="8591836"/><text x="99.4564%" y="655.50"></text></g><g><title>_start (292,678,610 samples, 10.45%)</title><rect x="89.4948%" y="709" width="10.4484%" height="15" fill="rgb(249,149,8)" fg:x="2506908125" fg:w="292678610"/><text x="89.7448%" y="719.50">_start</text></g><g><title>_dl_start (12,047,320 samples, 0.43%)</title><rect x="99.5131%" y="693" width="0.4301%" height="15" fill="rgb(243,35,44)" fg:x="2787539415" fg:w="12047320"/><text x="99.7631%" y="703.50"></text></g><g><title>_dl_start_final (12,047,320 samples, 0.43%)</title><rect x="99.5131%" y="677" width="0.4301%" height="15" fill="rgb(246,89,9)" fg:x="2787539415" fg:w="12047320"/><text x="99.7631%" y="687.50"></text></g><g><title>_dl_sysdep_start (12,047,320 samples, 0.43%)</title><rect x="99.5131%" y="661" width="0.4301%" height="15" fill="rgb(233,213,13)" fg:x="2787539415" fg:w="12047320"/><text x="99.7631%" y="671.50"></text></g><g><title>dl_main (12,047,320 samples, 0.43%)</title><rect x="99.5131%" y="645" width="0.4301%" height="15" fill="rgb(233,141,41)" fg:x="2787539415" fg:w="12047320"/><text x="99.7631%" y="655.50"></text></g><g><title>_dl_map_object_deps (12,047,320 samples, 0.43%)</title><rect x="99.5131%" y="629" width="0.4301%" height="15" fill="rgb(239,167,4)" fg:x="2787539415" fg:w="12047320"/><text x="99.7631%" y="639.50"></text></g><g><title>_dl_catch_exception (12,047,320 samples, 0.43%)</title><rect x="99.5131%" y="613" width="0.4301%" height="15" fill="rgb(209,217,16)" fg:x="2787539415" fg:w="12047320"/><text x="99.7631%" y="623.50"></text></g><g><title>openaux (12,047,320 samples, 0.43%)</title><rect x="99.5131%" y="597" width="0.4301%" height="15" fill="rgb(219,88,35)" fg:x="2787539415" fg:w="12047320"/><text x="99.7631%" y="607.50"></text></g><g><title>_dl_map_object (12,047,320 samples, 0.43%)</title><rect x="99.5131%" y="581" width="0.4301%" height="15" fill="rgb(220,193,23)" fg:x="2787539415" fg:w="12047320"/><text x="99.7631%" y="591.50"></text></g><g><title>_dl_map_object_from_fd (12,047,320 samples, 0.43%)</title><rect x="99.5131%" y="565" width="0.4301%" height="15" fill="rgb(230,90,52)" fg:x="2787539415" fg:w="12047320"/><text x="99.7631%" y="575.50"></text></g><g><title>_dl_map_segments (12,047,320 samples, 0.43%)</title><rect x="99.5131%" y="549" width="0.4301%" height="15" fill="rgb(252,106,19)" fg:x="2787539415" fg:w="12047320"/><text x="99.7631%" y="559.50"></text></g><g><title>__mmap64 (12,047,320 samples, 0.43%)</title><rect x="99.5131%" y="533" width="0.4301%" height="15" fill="rgb(206,74,20)" fg:x="2787539415" fg:w="12047320"/><text x="99.7631%" y="543.50"></text></g><g><title>__mmap64 (12,047,320 samples, 0.43%)</title><rect x="99.5131%" y="517" width="0.4301%" height="15" fill="rgb(230,138,44)" fg:x="2787539415" fg:w="12047320"/><text x="99.7631%" y="527.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (12,047,320 samples, 0.43%)</title><rect x="99.5131%" y="501" width="0.4301%" height="15" fill="rgb(235,182,43)" fg:x="2787539415" fg:w="12047320"/><text x="99.7631%" y="511.50"></text></g><g><title>do_syscall_64 (12,047,320 samples, 0.43%)</title><rect x="99.5131%" y="485" width="0.4301%" height="15" fill="rgb(242,16,51)" fg:x="2787539415" fg:w="12047320"/><text x="99.7631%" y="495.50"></text></g><g><title>x64_sys_call (12,047,320 samples, 0.43%)</title><rect x="99.5131%" y="469" width="0.4301%" height="15" fill="rgb(248,9,4)" fg:x="2787539415" fg:w="12047320"/><text x="99.7631%" y="479.50"></text></g><g><title>__x64_sys_mmap (12,047,320 samples, 0.43%)</title><rect x="99.5131%" y="453" width="0.4301%" height="15" fill="rgb(210,31,22)" fg:x="2787539415" fg:w="12047320"/><text x="99.7631%" y="463.50"></text></g><g><title>ksys_mmap_pgoff (12,047,320 samples, 0.43%)</title><rect x="99.5131%" y="437" width="0.4301%" height="15" fill="rgb(239,54,39)" fg:x="2787539415" fg:w="12047320"/><text x="99.7631%" y="447.50"></text></g><g><title>vm_mmap_pgoff (12,047,320 samples, 0.43%)</title><rect x="99.5131%" y="421" width="0.4301%" height="15" fill="rgb(230,99,41)" fg:x="2787539415" fg:w="12047320"/><text x="99.7631%" y="431.50"></text></g><g><title>do_mmap (12,047,320 samples, 0.43%)</title><rect x="99.5131%" y="405" width="0.4301%" height="15" fill="rgb(253,106,12)" fg:x="2787539415" fg:w="12047320"/><text x="99.7631%" y="415.50"></text></g><g><title>mmap_region (12,047,320 samples, 0.43%)</title><rect x="99.5131%" y="389" width="0.4301%" height="15" fill="rgb(213,46,41)" fg:x="2787539415" fg:w="12047320"/><text x="99.7631%" y="399.50"></text></g><g><title>may_expand_vm (12,047,320 samples, 0.43%)</title><rect x="99.5131%" y="373" width="0.4301%" height="15" fill="rgb(215,133,35)" fg:x="2787539415" fg:w="12047320"/><text x="99.7631%" y="383.50"></text></g><g><title>asm_exc_page_fault (563,307 samples, 0.02%)</title><rect x="99.9432%" y="709" width="0.0201%" height="15" fill="rgb(213,28,5)" fg:x="2799586735" fg:w="563307"/><text x="100.1932%" y="719.50"></text></g><g><title>exc_page_fault (563,307 samples, 0.02%)</title><rect x="99.9432%" y="693" width="0.0201%" height="15" fill="rgb(215,77,49)" fg:x="2799586735" fg:w="563307"/><text x="100.1932%" y="703.50"></text></g><g><title>do_user_addr_fault (563,307 samples, 0.02%)</title><rect x="99.9432%" y="677" width="0.0201%" height="15" fill="rgb(248,100,22)" fg:x="2799586735" fg:w="563307"/><text x="100.1932%" y="687.50"></text></g><g><title>handle_mm_fault (563,307 samples, 0.02%)</title><rect x="99.9432%" y="661" width="0.0201%" height="15" fill="rgb(208,67,9)" fg:x="2799586735" fg:w="563307"/><text x="100.1932%" y="671.50"></text></g><g><title>__handle_mm_fault (563,307 samples, 0.02%)</title><rect x="99.9432%" y="645" width="0.0201%" height="15" fill="rgb(219,133,21)" fg:x="2799586735" fg:w="563307"/><text x="100.1932%" y="655.50"></text></g><g><title>handle_pte_fault (563,307 samples, 0.02%)</title><rect x="99.9432%" y="629" width="0.0201%" height="15" fill="rgb(246,46,29)" fg:x="2799586735" fg:w="563307"/><text x="100.1932%" y="639.50"></text></g><g><title>do_anonymous_page (563,307 samples, 0.02%)</title><rect x="99.9432%" y="613" width="0.0201%" height="15" fill="rgb(246,185,52)" fg:x="2799586735" fg:w="563307"/><text x="100.1932%" y="623.50"></text></g><g><title>__mem_cgroup_charge (563,307 samples, 0.02%)</title><rect x="99.9432%" y="597" width="0.0201%" height="15" fill="rgb(252,136,11)" fg:x="2799586735" fg:w="563307"/><text x="100.1932%" y="607.50"></text></g><g><title>charge_memcg (563,307 samples, 0.02%)</title><rect x="99.9432%" y="581" width="0.0201%" height="15" fill="rgb(219,138,53)" fg:x="2799586735" fg:w="563307"/><text x="100.1932%" y="591.50"></text></g><g><title>try_charge_memcg (563,307 samples, 0.02%)</title><rect x="99.9432%" y="565" width="0.0201%" height="15" fill="rgb(211,51,23)" fg:x="2799586735" fg:w="563307"/><text x="100.1932%" y="575.50"></text></g><g><title>drain_stock (563,307 samples, 0.02%)</title><rect x="99.9432%" y="549" width="0.0201%" height="15" fill="rgb(247,221,28)" fg:x="2799586735" fg:w="563307"/><text x="100.1932%" y="559.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (798,536 samples, 0.03%)</title><rect x="99.9633%" y="709" width="0.0285%" height="15" fill="rgb(251,222,45)" fg:x="2800150042" fg:w="798536"/><text x="100.2133%" y="719.50"></text></g><g><title>do_syscall_64 (798,536 samples, 0.03%)</title><rect x="99.9633%" y="693" width="0.0285%" height="15" fill="rgb(217,162,53)" fg:x="2800150042" fg:w="798536"/><text x="100.2133%" y="703.50"></text></g><g><title>x64_sys_call (798,536 samples, 0.03%)</title><rect x="99.9633%" y="677" width="0.0285%" height="15" fill="rgb(229,93,14)" fg:x="2800150042" fg:w="798536"/><text x="100.2133%" y="687.50"></text></g><g><title>__x64_sys_execve (798,536 samples, 0.03%)</title><rect x="99.9633%" y="661" width="0.0285%" height="15" fill="rgb(209,67,49)" fg:x="2800150042" fg:w="798536"/><text x="100.2133%" y="671.50"></text></g><g><title>do_execveat_common.isra.0 (798,536 samples, 0.03%)</title><rect x="99.9633%" y="645" width="0.0285%" height="15" fill="rgb(213,87,29)" fg:x="2800150042" fg:w="798536"/><text x="100.2133%" y="655.50"></text></g><g><title>bprm_execve (798,536 samples, 0.03%)</title><rect x="99.9633%" y="629" width="0.0285%" height="15" fill="rgb(205,151,52)" fg:x="2800150042" fg:w="798536"/><text x="100.2133%" y="639.50"></text></g><g><title>bprm_execve.part.0 (798,536 samples, 0.03%)</title><rect x="99.9633%" y="613" width="0.0285%" height="15" fill="rgb(253,215,39)" fg:x="2800150042" fg:w="798536"/><text x="100.2133%" y="623.50"></text></g><g><title>exec_binprm (798,536 samples, 0.03%)</title><rect x="99.9633%" y="597" width="0.0285%" height="15" fill="rgb(221,220,41)" fg:x="2800150042" fg:w="798536"/><text x="100.2133%" y="607.50"></text></g><g><title>search_binary_handler (798,536 samples, 0.03%)</title><rect x="99.9633%" y="581" width="0.0285%" height="15" fill="rgb(218,133,21)" fg:x="2800150042" fg:w="798536"/><text x="100.2133%" y="591.50"></text></g><g><title>load_elf_binary (798,536 samples, 0.03%)</title><rect x="99.9633%" y="565" width="0.0285%" height="15" fill="rgb(221,193,43)" fg:x="2800150042" fg:w="798536"/><text x="100.2133%" y="575.50"></text></g><g><title>setup_arg_pages (798,536 samples, 0.03%)</title><rect x="99.9633%" y="549" width="0.0285%" height="15" fill="rgb(240,128,52)" fg:x="2800150042" fg:w="798536"/><text x="100.2133%" y="559.50"></text></g><g><title>mprotect_fixup (798,536 samples, 0.03%)</title><rect x="99.9633%" y="533" width="0.0285%" height="15" fill="rgb(253,114,12)" fg:x="2800150042" fg:w="798536"/><text x="100.2133%" y="543.50"></text></g><g><title>perf_event_mmap (798,536 samples, 0.03%)</title><rect x="99.9633%" y="517" width="0.0285%" height="15" fill="rgb(215,223,47)" fg:x="2800150042" fg:w="798536"/><text x="100.2133%" y="527.50"></text></g><g><title>all (2,801,177,286 samples, 100%)</title><rect x="0.0000%" y="741" width="100.0000%" height="15" fill="rgb(248,225,23)" fg:x="0" fg:w="2801177286"/><text x="0.2500%" y="751.50"></text></g><g><title>sim (2,801,151,906 samples, 100.00%)</title><rect x="0.0009%" y="725" width="99.9991%" height="15" fill="rgb(250,108,0)" fg:x="25380" fg:w="2801151906"/><text x="0.2509%" y="735.50">sim</text></g></svg></svg>